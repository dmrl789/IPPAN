# IPPAN Blockchain Node - Optimized Production Multi-stage Docker build
# Optimized for high-performance deployment with security hardening

FROM rust:1.85-slim as builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    ca-certificates \
    curl \
    build-essential \
    git \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy dependency files first for better caching
COPY Cargo.toml ./
COPY crates/ crates/
COPY apps/neuro-cli/ apps/neuro-cli/
COPY benches/ benches/

# Create dummy main.rs for dependency compilation
RUN mkdir src && echo "fn main() {}" > src/main.rs

# Build dependencies with optimizations
RUN cargo build --release --bin ippan
RUN rm src/main.rs

# Copy source code
COPY src/ src/
COPY config/ config/
COPY scripts/ scripts/

# Build the application with production optimizations
RUN cargo build --release --bin ippan

# Frontend build stage
FROM node:20-alpine as frontend-builder

WORKDIR /app/frontend
COPY apps/unified-ui/package*.json ./
RUN rm -f package-lock.json && npm install --silent

COPY apps/unified-ui/ ./
RUN rm -rf node_modules && npm install --silent && npm run build

# Production runtime stage
FROM debian:bookworm-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    curl \
    jq \
    openssl \
    nginx \
    supervisor \
    dumb-init \
    && rm -rf /var/lib/apt/lists/*

# Create ippan user and group
RUN groupadd -r ippan && useradd -r -g ippan -d /data -s /bin/false ippan

# Create nginx user and group
RUN groupadd -r nginx && useradd -r -g nginx nginx

# Create required directories with proper permissions
RUN mkdir -p /data /keys /logs /config /var/www/html /var/log/supervisor /tmp/ippan /var/lib/nginx /var/lib/nginx/body /var/lib/nginx/proxy /var/lib/nginx/fastcgi /var/lib/nginx/uwsgi /var/lib/nginx/scgi && \
    chown -R ippan:ippan /data /keys /logs /config /tmp/ippan /var/log/supervisor && \
    chown -R nginx:nginx /var/lib/nginx /var/www/html /var/log/nginx && \
    chmod 755 /data /keys /logs /config /tmp/ippan && \
    chmod 755 /var/log/supervisor && \
    chmod 755 /var/lib/nginx && \
    touch /var/log/supervisor/supervisord.log && \
    chown ippan:ippan /var/log/supervisor/supervisord.log

# Copy the built binary
COPY --from=builder /app/target/release/ippan /usr/local/bin/ippan
RUN chmod +x /usr/local/bin/ippan

# Copy frontend build
COPY --from=frontend-builder /app/frontend/dist /var/www/html

# Copy configuration files
COPY --from=builder /app/config/ /config/
COPY --from=builder /app/scripts/ /scripts/

# Copy production configurations
COPY deployments/nginx/nginx.conf /etc/nginx/nginx.conf
COPY deployments/supervisor/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Make scripts executable
RUN chmod +x /scripts/*.sh

# Set nginx permissions
RUN chown -R nginx:nginx /var/www/html /var/log/nginx

# Switch to ippan user
USER ippan

# Expose ports
EXPOSE 8080 3000 80 443

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:80/health || exit 1

# Set environment variables
ENV RUST_LOG=info
ENV IPPAN_CONFIG_PATH=/config/default.toml
ENV IPPAN_DATA_DIR=/data
ENV IPPAN_KEYS_DIR=/keys
ENV IPPAN_LOG_DIR=/logs
ENV NODE_ENV=production
ENV RUST_BACKTRACE=1

# Use dumb-init to handle signals properly
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Start the application with supervisor
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
