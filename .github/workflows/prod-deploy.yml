name: Deploy blockchain nodes

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      force_rebuild:
        description: 'Force rebuild of all images'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  packages: write
  deployments: write

env:
  API_HOST_PORT: "7080"
  P2P_PORT: "4001"

jobs:
  deploy-primary:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy on primary (188.245.97.41)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          port: ${{ secrets.DEPLOY_PORT }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          fingerprint: ${{ secrets.DEPLOY_FINGERPRINT }}
          script_stop: true
          script: |
            set -euo pipefail
            PUB_IP="${{ secrets.DEPLOY_HOST }}"
            API_HOST_PORT="${{ env.API_HOST_PORT }}"
            P2P_PORT="${{ env.P2P_PORT }}"

            if command -v sudo >/dev/null 2>&1 && sudo -n true 2>/dev/null; then
              echo "🔄 Updating packages via sudo..."
              sudo apt-get update -y
              sudo DEBIAN_FRONTEND=noninteractive apt-get install -y docker.io docker-compose-plugin jq ufw
            elif [ "$(id -u)" -eq 0 ]; then
              echo "🔄 Updating packages as root..."
              apt-get update -y
              DEBIAN_FRONTEND=noninteractive apt-get install -y docker.io docker-compose-plugin jq ufw
            else
              echo "⚠️ Skipping package updates (no passwordless sudo/root access)"
            fi

            mkdir -p /opt/ippan && cd /opt/ippan

            tee docker-compose.override.clear-node-ports.yml >/dev/null <<'YML'
            services:
              ippan-node-1:
                ports: []
            YML

            tee docker-compose.override.node.yml >/dev/null <<YML
            services:
              ippan-node-1:
                image: ghcr.io/dmrl789/ippan:latest
                user: "0:0"
                command:
                  - sh
                  - -lc
                  - |
                    set -e
                    echo 'deb http://deb.debian.org/debian bookworm main' > /etc/apt/sources.list.d/bookworm.list
                    apt-get update -y
                    apt-get install -y --no-install-recommends -t bookworm libssl3 ca-certificates
                    exec ippan-node
                networks:
                  default:
                    aliases: [node]
                environment:
                  IPPAN_P2P_LISTEN: "/ip4/0.0.0.0/tcp/${P2P_PORT}"
                  IPPAN_P2P_ANNOUNCE: "/ip4/${PUB_IP}/tcp/${P2P_PORT}"
                ports:
                  - "0.0.0.0:${P2P_PORT}:${P2P_PORT}"
                  - "127.0.0.1:${API_HOST_PORT}:8080"
            YML

            docker compose -f docker-compose.yml -f docker-compose.full-stack.yml \
              -f docker-compose.override.clear-node-ports.yml -f docker-compose.override.node.yml \
              up -d --no-build --no-deps ippan-node-1


            ufw allow ${P2P_PORT}/tcp || true
            ufw reload || true

            curl -fsSL "http://127.0.0.1:${API_HOST_PORT}/health" | jq .

  deploy-secondary:
    runs-on: ubuntu-latest
    needs: deploy-primary
    steps:
      - name: Deploy on secondary (135.181.145.174)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ vars.SECONDARY_HOST }}
          port: ${{ secrets.DEPLOY_PORT }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          fingerprint: ${{ secrets.SECONDARY_FINGERPRINT }}
          script_stop: true
          script: |
            set -euo pipefail
            PUB_IP="${{ vars.SECONDARY_HOST }}"
            API_HOST_PORT="${{ env.API_HOST_PORT }}"
            P2P_PORT="${{ env.P2P_PORT }}"

            if command -v sudo >/dev/null 2>&1 && sudo -n true 2>/dev/null; then
              echo "🔄 Updating packages via sudo..."
              sudo apt-get update -y
              sudo DEBIAN_FRONTEND=noninteractive apt-get install -y docker.io docker-compose-plugin jq ufw
            elif [ "$(id -u)" -eq 0 ]; then
              echo "🔄 Updating packages as root..."
              apt-get update -y
              DEBIAN_FRONTEND=noninteractive apt-get install -y docker.io docker-compose-plugin jq ufw
            else
              echo "⚠️ Skipping package updates (no passwordless sudo/root access)"
            fi

            mkdir -p /opt/ippan && cd /opt/ippan

            tee docker-compose.override.clear-node-ports.yml >/dev/null <<'YML'
            services:
              ippan-node-1:
                ports: []
            YML

            tee docker-compose.override.node.yml >/dev/null <<YML
            services:
              ippan-node-1:
                image: ghcr.io/dmrl789/ippan:latest
                user: "0:0"
                command:
                  - sh
                  - -lc
                  - |
                    set -e
                    echo 'deb http://deb.debian.org/debian bookworm main' > /etc/apt/sources.list.d/bookworm.list
                    apt-get update -y
                    apt-get install -y --no-install-recommends -t bookworm libssl3 ca-certificates
                    exec ippan-node
                networks:
                  default:
                    aliases: [node]
                environment:
                  IPPAN_P2P_LISTEN: "/ip4/0.0.0.0/tcp/${P2P_PORT}"
                  IPPAN_P2P_ANNOUNCE: "/ip4/${PUB_IP}/tcp/${P2P_PORT}"
                ports:
                  - "0.0.0.0:${P2P_PORT}:${P2P_PORT}"
                  - "127.0.0.1:${API_HOST_PORT}:8080"
            YML

            docker compose -f docker-compose.yml -f docker-compose.full-stack.yml \
              -f docker-compose.override.clear-node-ports.yml -f docker-compose.override.node.yml \
              up -d --no-build --no-deps ippan-node-1

            ufw allow ${P2P_PORT}/tcp || true
            ufw reload || true

  post-check:
    runs-on: ubuntu-latest
    needs: [deploy-primary, deploy-secondary]
    steps:
      - name: Check primary node health
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          port: ${{ secrets.DEPLOY_PORT }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          fingerprint: ${{ secrets.DEPLOY_FINGERPRINT }}
          script: |
            set -euo pipefail
            API_HOST_PORT="${{ env.API_HOST_PORT }}"
            HEALTH=$(curl -fsSL "http://127.0.0.1:${API_HOST_PORT}/health")
            echo "$HEALTH" | jq '.'
            echo "$HEALTH" | jq -e '.status == "healthy"' >/dev/null

      - name: Check secondary node health
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ vars.SECONDARY_HOST }}
          port: ${{ secrets.DEPLOY_PORT }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          fingerprint: ${{ secrets.SECONDARY_FINGERPRINT }}
          script: |
            set -euo pipefail
            API_HOST_PORT="${{ env.API_HOST_PORT }}"
            HEALTH=$(curl -fsSL "http://127.0.0.1:${API_HOST_PORT}/health")
            echo "$HEALTH" | jq '.'
            echo "$HEALTH" | jq -e '.status == "healthy"' >/dev/null

      - name: Verify P2P reachability (both hosts)
        run: |
          set -euo pipefail
          for h in "${{ secrets.DEPLOY_HOST }}" "${{ vars.SECONDARY_HOST }}"; do
            echo "Testing P2P $h:${{ env.P2P_PORT }}"
            (echo >/dev/tcp/$h/${{ env.P2P_PORT }}) >/dev/null 2>&1 || {
              echo "::error::P2P port ${{ env.P2P_PORT }} closed on $h"
              exit 1
            }
          done
