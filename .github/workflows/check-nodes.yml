name: Check Nodes (API Health)

on:
  workflow_dispatch:
    inputs:
      api_base:
        description: "API base URL to check (e.g., https://ui.ippan.org/api)"
        required: false
        default: ""
      health_path:
        description: "Override health path (defaults to /health)"
        required: false
        default: "/health"
      timeout_seconds:
        description: "Health check timeout in seconds"
        required: false
        default: "30"
        type: number
  schedule:
    # Runs every 30 minutes
    - cron: "*/30 * * * *"

permissions:
  contents: read

jobs:
  health-check:
    name: Node Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    env:
      API_BASE: ${{ inputs.api_base != '' && inputs.api_base || vars.NEXT_PUBLIC_API_BASE_URL || 'http://127.0.0.1:8080' }}
      HEALTH_PATH: ${{ inputs.health_path != '' && inputs.health_path || '/health' }}
      TIMEOUT_SECONDS: ${{ inputs.timeout_seconds || '30' }}

    steps:
      - name: Display effective targets
        run: |
          echo "API_BASE=${API_BASE}"
          echo "HEALTH_PATH=${HEALTH_PATH}"
          if [ -z "${API_BASE}" ]; then
            echo "::error::API_BASE is empty. Provide the api_base input or define repo Variable: NEXT_PUBLIC_API_BASE_URL."
            exit 1
          fi

      - name: Install dependencies
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y curl jq

      - name: Check API /health (retry up to 3 times)
        run: |
          set -euo pipefail
          tries=0
          until [ $tries -ge 3 ]; do
            echo "Probe $((tries+1))/3: ${API_BASE}${HEALTH_PATH}"
            if curl -fsSL "${API_BASE}${HEALTH_PATH}" -o health.json && jq -e '.status=="healthy"' health.json >/dev/null; then
              echo "âœ… API health OK"
              exit 0
            fi
            tries=$((tries+1))
            echo "Health check failed; retrying in 5 seconds..."
            sleep 5
          done

          echo "::error::API health check failed after 3 attempts."
          echo "Last response (if any):"
          cat health.json || echo "No response."
          exit 1

      - name: Optional API /status summary
        continue-on-error: true
        run: |
          set -euo pipefail
          echo "Fetching ${API_BASE}/status (non-fatal)..."
          curl -fsSL "${API_BASE}/status" | jq '.' || true
