---
name: ChatOps - Apply Patch

"on":
  issue_comment:
    types: [created, edited]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.event.issue.number }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write
  issues: read

jobs:
  apply:
    # Only run when someone writes "/apply-patch" (anywhere in the comment)
    if: contains(github.event.comment.body, '/apply-patch')
    runs-on: ubuntu-latest

    steps:
      - name: Check out default branch
        uses: actions/checkout@v4
        with:
          token: ${{ github.token }}
          ref: ${{ github.event.repository.default_branch }}

      - name: Debug event
        run: |
          echo "default_branch=${{ github.event.repository.default_branch }}"
          echo "issue_number=${{ github.event.issue.number }}"
          echo "comment_id=${{ github.event.comment.id }}"

      - name: Configure Git
        run: |
          git config user.name "ippan-auto-bot"
          git config user.email "actions@users.noreply.github.com"

      - name: Create working branch
        run: |
          BRANCH="auto/chatops-${{ github.event.issue.number }}-${{ github.event.comment.id }}"
          echo "BRANCH=$BRANCH" >> "$GITHUB_ENV"
          git checkout -b "$BRANCH"

      - name: Extract patch from comment or issue body
        id: extract
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}
          COMMENT_BODY: ${{ github.event.comment.body }}
        run: |
          python3 - << 'PY'
          import os, re, sys
          comment = os.environ.get("COMMENT_BODY","")
          issue   = os.environ.get("ISSUE_BODY","")
          def find_patch(text):
              # grab first fenced block that looks like a diff/patch OR a raw unified diff
              blocks = re.findall(r"```(?:diff|patch)?\n(.*?)```", text, flags=re.S)
              candidates = blocks + [text]
              for c in candidates:
                  c_stripped = c.lstrip()
                  if ('diff --git ' in c) or c_stripped.startswith(('--- ', 'From ')):
                      return c
              return None
          patch = find_patch(comment) or find_patch(issue)
          if patch:
              with open("change.patch","w",encoding="utf-8") as f:
                  f.write(patch)
              print("::notice::Found unified diff content.")
          else:
              print("::warning::No unified diff found in comment or issue body.")
              # empty file; workflow may still perform cleanup in other workflows
              open("change.patch","w",encoding="utf-8").close()
          PY

      - name: Try applying patch (3-way) if present
        run: |
          set -e
          if [ -s change.patch ]; then
            git apply --index --3way change.patch || (echo "::warning::3-way failed; trying without 3-way" && git apply --index change.patch)
          else
            echo "No patch content detected; nothing to apply."
          fi

      - name: Commit changes (if any)
        id: commit
        run: |
          if git diff --cached --quiet; then
            echo "made_commit=false" >> $GITHUB_OUTPUT
            echo "No changes staged; skipping push/PR."
            exit 0
          fi
          git commit -m "ChatOps: apply patch from comment #${{ github.event.comment.id }} (issue #${{ github.event.issue.number }})"
          echo "made_commit=true" >> $GITHUB_OUTPUT

      - name: Push branch
        if: steps.commit.outputs.made_commit == 'true'
        run: git push -u origin "$BRANCH"

      - name: Open PR
        if: steps.commit.outputs.made_commit == 'true'
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ github.token }}
          branch: ${{ env.BRANCH }}
          base: ${{ github.event.repository.default_branch }}
          title: "ChatOps: apply patch from comment (issue #${{ github.event.issue.number }})"
          body: |
            Created by the ChatOps workflow on comment ${{ github.event.comment.id }}.
            If no patch was detected, this PR will not be created.
          commit-message: "ChatOps apply-patch"
          labels: auto-patch
