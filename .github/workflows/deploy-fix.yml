name: Fix IPPAN Deployment Issues

on:
  workflow_dispatch:
    inputs:
      restart_nodes:
        description: 'Restart blockchain nodes'
        required: true
        default: true
        type: boolean
      fix_secondary:
        description: 'Fix secondary server connectivity'
        required: true
        default: true
        type: boolean

permissions:
  contents: read
  packages: write
  deployments: write

env:
  API_HOST_PORT: "7080"
  P2P_PORT: "4001"

jobs:
  fix-primary-server:
    runs-on: ubuntu-latest
    steps:
      - name: Repair services on primary server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          port: ${{ secrets.DEPLOY_PORT }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          fingerprint: ${{ secrets.DEPLOY_FINGERPRINT }}
          script: |
            set -euo pipefail
            
            echo "üîß Fixing IPPAN deployment on primary server..."
            
            # Update system packages when sudo/root access is available
            if command -v sudo >/dev/null 2>&1 && sudo -n true 2>/dev/null; then
              echo "üîÑ Updating packages via sudo..."
              sudo apt-get update -y
              sudo DEBIAN_FRONTEND=noninteractive apt-get install -y docker.io docker-compose-plugin jq ufw
            elif [ "$(id -u)" -eq 0 ]; then
              echo "üîÑ Updating packages as root..."
              apt-get update -y
              DEBIAN_FRONTEND=noninteractive apt-get install -y docker.io docker-compose-plugin jq ufw
            else
              echo "‚ö†Ô∏è Skipping package updates (no passwordless sudo/root access)"
            fi
            
            # Navigate to deployment directory
            cd /opt/ippan
            
            # Stop all services
            echo "üõë Stopping all services..."
            docker compose down || true
            
            # Clean up any stuck containers
            docker system prune -f || true
            
            # Restart Docker daemon
            sudo systemctl restart docker
            
            # Start blockchain nodes
            echo "üöÄ Starting blockchain nodes..."
            docker compose -f docker-compose.yml -f docker-compose.full-stack.yml up -d --force-recreate
            
            # Wait for nodes to start
            sleep 30
            
            # Check node health
            echo "üîç Checking node health..."
            if curl -fsSL "http://127.0.0.1:${API_HOST_PORT}/health" >/dev/null 2>&1; then
              echo "‚úÖ Primary node is healthy"
            else
              echo "‚ùå Primary node health check failed"
              docker compose logs ippan-node-1
            fi
            
            # Final health check
            echo "üè• Final health check..."
            curl -fsSL "http://127.0.0.1:${API_HOST_PORT}/health" | jq . || echo "API health check failed"
            
            echo "‚úÖ Primary server fix completed!"

  fix-secondary-server:
    runs-on: ubuntu-latest
    needs: fix-primary-server
    steps:
      - name: Fix secondary server connectivity
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ vars.SECONDARY_HOST }}
          port: ${{ secrets.DEPLOY_PORT }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          fingerprint: ${{ secrets.SECONDARY_FINGERPRINT }}
          script: |
            set -euo pipefail
            
            echo "üîß Fixing IPPAN deployment on secondary server..."
            
            # Update system packages when sudo/root access is available
            if command -v sudo >/dev/null 2>&1 && sudo -n true 2>/dev/null; then
              echo "üîÑ Updating packages via sudo..."
              sudo apt-get update -y
              sudo DEBIAN_FRONTEND=noninteractive apt-get install -y docker.io docker-compose-plugin jq ufw
            elif [ "$(id -u)" -eq 0 ]; then
              echo "üîÑ Updating packages as root..."
              apt-get update -y
              DEBIAN_FRONTEND=noninteractive apt-get install -y docker.io docker-compose-plugin jq ufw
            else
              echo "‚ö†Ô∏è Skipping package updates (no passwordless sudo/root access)"
            fi
            
            # Navigate to deployment directory
            cd /opt/ippan
            
            # Stop all services
            echo "üõë Stopping all services..."
            docker compose down || true
            
            # Clean up any stuck containers
            docker system prune -f || true
            
            # Restart Docker daemon
            sudo systemctl restart docker
            
            # Start blockchain nodes
            echo "üöÄ Starting blockchain nodes..."
            docker compose -f docker-compose.yml -f docker-compose.full-stack.yml up -d --force-recreate
            
            # Wait for nodes to start
            sleep 30
            
            # Check node health
            echo "üîç Checking node health..."
            if curl -fsSL "http://127.0.0.1:${API_HOST_PORT}/health" >/dev/null 2>&1; then
              echo "‚úÖ Secondary node is healthy"
            else
              echo "‚ùå Secondary node health check failed"
              docker compose logs ippan-node-1
            fi
            
            # Configure firewall
            echo "üî• Configuring firewall..."
            sudo ufw allow ${P2P_PORT}/tcp || true
            sudo ufw reload || true
            
            echo "‚úÖ Secondary server fix completed!"

  verify-deployment:
    runs-on: ubuntu-latest
    needs: [fix-primary-server, fix-secondary-server]
    steps:
      - name: Verify primary node health
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          port: ${{ secrets.DEPLOY_PORT }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          fingerprint: ${{ secrets.DEPLOY_FINGERPRINT }}
          script: |
            set -euo pipefail
            API_HOST_PORT="${{ env.API_HOST_PORT }}"
            HEALTH=$(curl -fsSL "http://127.0.0.1:${API_HOST_PORT}/health")
            echo "$HEALTH" | jq '.'
            echo "$HEALTH" | jq -e '.status == "healthy"' >/dev/null

      - name: Verify secondary node health
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ vars.SECONDARY_HOST }}
          port: ${{ secrets.DEPLOY_PORT }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          fingerprint: ${{ secrets.SECONDARY_FINGERPRINT }}
          script: |
            set -euo pipefail
            API_HOST_PORT="${{ env.API_HOST_PORT }}"
            HEALTH=$(curl -fsSL "http://127.0.0.1:${API_HOST_PORT}/health")
            echo "$HEALTH" | jq '.'
            echo "$HEALTH" | jq -e '.status == "healthy"' >/dev/null

      - name: Verify P2P connectivity
        run: |
          set -euo pipefail
          echo "Testing P2P connectivity..."
          for h in "${{ secrets.DEPLOY_HOST }}" "${{ vars.SECONDARY_HOST }}"; do
            echo "Testing P2P $h:${{ env.P2P_PORT }}"
            if (echo >/dev/tcp/$h/${{ env.P2P_PORT }}) >/dev/null 2>&1; then
              echo "‚úÖ P2P port ${{ env.P2P_PORT }} open on $h"
            else
              echo "‚ùå P2P port ${{ env.P2P_PORT }} closed on $h"
            fi
          done

          echo "‚úÖ Deployment verification completed!"
