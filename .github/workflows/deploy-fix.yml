name: Fix IPPAN Deployment Issues

on:
  workflow_dispatch:
    inputs:
      fix_ssl:
        description: 'Fix SSL certificate issues'
        required: true
        default: true
        type: boolean
      restart_nodes:
        description: 'Restart blockchain nodes'
        required: true
        default: true
        type: boolean
      fix_secondary:
        description: 'Fix secondary server connectivity'
        required: true
        default: true
        type: boolean

permissions:
  contents: read
  packages: write
  deployments: write

env:
  UI_DOMAIN: ui.ippan.org
  API_HOST_PORT: "7080"
  P2P_PORT: "4001"

jobs:
  fix-primary-server:
    runs-on: ubuntu-latest
    steps:
      - name: Fix SSL and restart services on primary server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          port: ${{ secrets.DEPLOY_PORT }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          fingerprint: ${{ secrets.DEPLOY_FINGERPRINT }}
          script: |
            set -euo pipefail
            
            echo "üîß Fixing IPPAN deployment on primary server..."
            
            # Update system packages
            apt-get update -y
            DEBIAN_FRONTEND=noninteractive apt-get install -y docker.io docker-compose-plugin jq ufw nginx certbot python3-certbot-nginx
            
            # Navigate to deployment directory
            cd /opt/ippan
            
            # Stop all services
            echo "üõë Stopping all services..."
            docker compose down || true
            
            # Clean up any stuck containers
            docker system prune -f || true
            
            # Restart Docker daemon
            systemctl restart docker
            
            # Start blockchain nodes
            echo "üöÄ Starting blockchain nodes..."
            docker compose -f docker-compose.yml -f docker-compose.full-stack.yml up -d --force-recreate
            
            # Wait for nodes to start
            sleep 30
            
            # Check node health
            echo "üîç Checking node health..."
            if curl -fsSL "http://127.0.0.1:${API_HOST_PORT}/health" >/dev/null 2>&1; then
              echo "‚úÖ Primary node is healthy"
            else
              echo "‚ùå Primary node health check failed"
              docker compose logs ippan-node-1
            fi
            
            # Fix SSL certificate
            echo "üîê Fixing SSL certificate..."
            if [ ! -f "/etc/letsencrypt/live/${UI_DOMAIN}/fullchain.pem" ]; then
              echo "üìú Obtaining SSL certificate..."
              certbot --nginx -d ${UI_DOMAIN} --non-interactive --agree-tos --email admin@${UI_DOMAIN} || true
            else
              echo "üîÑ Renewing SSL certificate..."
              certbot renew --quiet || true
            fi
            
            # Update nginx configuration
            echo "‚öôÔ∏è Updating nginx configuration..."
            tee /etc/nginx/sites-available/${UI_DOMAIN} >/dev/null <<NGINX
            server {
              listen 80;
              server_name ${UI_DOMAIN};
              return 301 https://${UI_DOMAIN}\$request_uri;
            }

            server {
              listen 443 ssl http2;
              server_name ${UI_DOMAIN};

              ssl_certificate     /etc/letsencrypt/live/${UI_DOMAIN}/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/${UI_DOMAIN}/privkey.pem;

              root /opt/ippan/ui/dist;
              index index.html;

              location /api/ {
                proxy_pass         http://127.0.0.1:${API_HOST_PORT}/;
                proxy_http_version 1.1;
                proxy_set_header   Host \$host;
                proxy_set_header   X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header   X-Forwarded-Proto \$scheme;
                proxy_buffering    off;
              }

              location /ws {
                proxy_pass         http://127.0.0.1:${API_HOST_PORT}/ws;
                proxy_http_version 1.1;
                proxy_set_header   Upgrade \$http_upgrade;
                proxy_set_header   Connection "upgrade";
                proxy_set_header   Host \$host;
                proxy_read_timeout 600s;
                proxy_send_timeout 600s;
              }

              location / {
                try_files \$uri /index.html;
              }
            }
            NGINX
            
            # Enable site and test configuration
            ln -sf /etc/nginx/sites-available/${UI_DOMAIN} /etc/nginx/sites-enabled/${UI_DOMAIN}
            nginx -t
            
            # Restart nginx
            systemctl restart nginx
            
            # Final health check
            echo "üè• Final health check..."
            curl -fsSL "http://127.0.0.1:${API_HOST_PORT}/health" | jq . || echo "API health check failed"
            
            echo "‚úÖ Primary server fix completed!"

  fix-secondary-server:
    runs-on: ubuntu-latest
    needs: fix-primary-server
    steps:
      - name: Fix secondary server connectivity
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ vars.SECONDARY_HOST }}
          port: ${{ secrets.DEPLOY_PORT }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          fingerprint: ${{ secrets.SECONDARY_FINGERPRINT }}
          script: |
            set -euo pipefail
            
            echo "üîß Fixing IPPAN deployment on secondary server..."
            
            # Update system packages
            apt-get update -y
            DEBIAN_FRONTEND=noninteractive apt-get install -y docker.io docker-compose-plugin jq ufw
            
            # Navigate to deployment directory
            cd /opt/ippan
            
            # Stop all services
            echo "üõë Stopping all services..."
            docker compose down || true
            
            # Clean up any stuck containers
            docker system prune -f || true
            
            # Restart Docker daemon
            systemctl restart docker
            
            # Start blockchain nodes
            echo "üöÄ Starting blockchain nodes..."
            docker compose -f docker-compose.yml -f docker-compose.full-stack.yml up -d --force-recreate
            
            # Wait for nodes to start
            sleep 30
            
            # Check node health
            echo "üîç Checking node health..."
            if curl -fsSL "http://127.0.0.1:${API_HOST_PORT}/health" >/dev/null 2>&1; then
              echo "‚úÖ Secondary node is healthy"
            else
              echo "‚ùå Secondary node health check failed"
              docker compose logs ippan-node-1
            fi
            
            # Configure firewall
            echo "üî• Configuring firewall..."
            ufw allow ${P2P_PORT}/tcp || true
            ufw allow 80/tcp || true
            ufw allow 443/tcp || true
            ufw reload || true
            
            echo "‚úÖ Secondary server fix completed!"

  verify-deployment:
    runs-on: ubuntu-latest
    needs: [fix-primary-server, fix-secondary-server]
    steps:
      - name: Verify deployment is working
        run: |
          set -euo pipefail
          
          echo "üîç Verifying deployment..."
          
          # Test primary server
          echo "Testing primary server..."
          curl -fsSLI "https://ui.ippan.org/" || echo "HTTPS failed, trying HTTP..."
          curl -fsSLI "http://ui.ippan.org/" || echo "HTTP also failed"
          
          # Test API health
          echo "Testing API health..."
          HEALTH=$(curl -fsSL "https://ui.ippan.org/api/health" || curl -fsSL "http://ui.ippan.org/api/health" || echo '{"status":"error"}')
          echo "$HEALTH"
          
          # Test P2P connectivity
          echo "Testing P2P connectivity..."
          for h in "${{ secrets.DEPLOY_HOST }}" "${{ vars.SECONDARY_HOST }}"; do
            echo "Testing P2P $h:4001"
            (echo >/dev/tcp/$h/4001) >/dev/null 2>&1 && echo "‚úÖ P2P port 4001 open on $h" || echo "‚ùå P2P port 4001 closed on $h"
          done
          
          echo "‚úÖ Deployment verification completed!"