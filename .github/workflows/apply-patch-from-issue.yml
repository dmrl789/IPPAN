name: Apply Patch From Issue

on:
  issues:
    types: [opened, edited, reopened, labeled]

concurrency:
  group: apply-patch-${{ github.event.issue.number }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write
  issues: read

jobs:
  apply:
    if: contains(github.event.issue.labels.*.name, 'auto-patch')
    runs-on: ubuntu-latest

    steps:
      - name: Check out repo
        uses: actions/checkout@v4
        with:
          token: ${{ github.token }}
          ref: ${{ github.event.repository.default_branch }}

      - name: Debug default/base/head
        run: |
          echo "default_branch=${{ github.event.repository.default_branch }}"
          echo "labels=${{ toJson(github.event.issue.labels.*.name) }}"

      - name: Extract patch from issue body (or allow cleanup-only)
        id: extract
        env:
          HAS_CLEANUP: ${{ contains(github.event.issue.labels.*.name, 'cleanup-now') }}
        run: |
          python3 - << 'PY'
          import os, re, sys
          body = """${{ github.event.issue.body }}"""
          blocks = re.findall(r"```(?:diff|patch)?\n(.*?)```", body, flags=re.S)
          candidates = blocks + [body]
          patch = next((c for c in candidates if 'diff --git ' in c or c.lstrip().startswith(('--- ','From '))), None)
          if not patch:
              # Permit empty body when label 'cleanup-now' is present
              if os.environ.get("HAS_CLEANUP","false").lower() == "true":
                  open("change.patch","w", encoding="utf-8").close()
                  sys.exit(0)
              print("No unified diff found in issue body.")
              sys.exit(1)
          with open("change.patch", "w", encoding="utf-8") as f:
              f.write(patch)
          PY

      - name: Debug - show event and labels
        run: |
          echo "event: ${{ github.event_name }}"
          echo "labels: ${{ toJson(github.event.issue.labels.*.name) }}"

      - name: Configure Git
        run: |
          git config user.name "ippan-auto-bot"
          git config user.email "actions@users.noreply.github.com"

      - name: Create branch
        run: |
          BRANCH="auto/patch-${{ github.event.issue.number }}"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          git checkout -b "$BRANCH"

      - name: Try applying patch (3-way) if present
        run: |
          set -e
          if [ -s change.patch ]; then
            git apply --index --3way change.patch || (echo "::warning::3-way failed; trying without 3-way" && git apply --index change.patch)
          else
            echo "No patch provided; proceeding to optional cleanup."
          fi

      - name: Remove mock/demo code (label: cleanup-now)
        if: contains(github.event.issue.labels.*.name, 'cleanup-now')
        shell: bash
        run: |
          set -euxo pipefail
          mapfile -t TARGETS < <(git ls-files -z | tr '\0' '\n' | grep -Ei '(^|/)(demo|demos|example|examples|mock|mocks|fixture|fixtures|sample|samples|storybook|playground|seed|seeds)(/|$)' || true)
          KEEP_PREFIXES=("apps/unified-ui/")
          DEL=()
          for f in "${TARGETS[@]}"; do
            skip=0
            for kp in "${KEEP_PREFIXES[@]}"; do
              [[ "$f" == "$kp"* ]] && { skip=1; break; }
            done
            [[ $skip -eq 0 ]] && DEL+=("$f")
          done
          if [ ${#DEL[@]} -gt 0 ]; then
            printf 'Removing %d paths...\n' "${#DEL[@]}"
            git rm -r -f -- "${DEL[@]}" || true
          else
            echo "No mock/demo paths found."
          fi
          git add -A

      - name: Commit changes (if any)
        id: commit
        run: |
          if git diff --cached --quiet; then
            echo "made_commit=false" >> $GITHUB_OUTPUT
            echo "No changes staged; patch may already be applied or nothing to cleanup."
            exit 0
          fi
          git commit -m "Apply patch / cleanup from #${{ github.event.issue.number }}"
          echo "made_commit=true" >> $GITHUB_OUTPUT

      - name: Push branch
        if: steps.commit.outputs.made_commit == 'true'
        run: |
          git push -u origin "$BRANCH"

      - name: Open PR
        if: steps.commit.outputs.made_commit == 'true'
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ github.token }}
          branch: ${{ env.BRANCH }}
          base: ${{ github.event.repository.default_branch }}
          title: "Apply patch / cleanup from #${{ github.event.issue.number }}"
          body: |
            Automated PR created from Issue #${{ github.event.issue.number }}.
            This PR was created by the Apply Patch From Issue workflow.
          commit-message: "Apply patch / cleanup from #${{ github.event.issue.number }}"
          labels: auto-patch

      - name: Safety: cancel if base==head (should never happen)
        if: steps.cpr.outputs.pull-request-number == '' || env.BRANCH == github.event.repository.default_branch
        run: |
          echo "::warning::PR not opened or base=head detected. BRANCH=$BRANCH base=${{ github.event.repository.default_branch }}"
          exit 0

      - name: Enable auto-merge (label: automerge)
        if: contains(github.event.issue.labels.*.name, 'automerge') && steps.cpr.outputs['pull-request-number'] != ''
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ github.token }}
          pull-request-number: ${{ steps.cpr.outputs['pull-request-number'] }}
          merge-method: squash
