name: IPPAN Infra Health Check (Codex)

on:
  workflow_dispatch:
    inputs:
      rpc_port:
        description: "RPC/edge HTTP port (loopback on server)"
        default: "8080"
        required: true
      ui_port:
        description: "Unified UI port (loopback on server)"
        default: "3000"
        required: true
      ui_domain:
        description: "Public UI domain (https) to probe from runner"
        default: "ui.ippan.org"
        required: true
      endpoints_health:
        description: "Health endpoint path"
        default: "/health"
        required: true
      endpoints_peers:
        description: "Peers endpoint path"
        default: "/p2p/peers"
        required: true
      endpoints_block:
        description: "Block endpoint path"
        default: "/block"
        required: true
      duration_sec:
        description: "Seconds to monitor (loop with height advance check)"
        default: "60"
        required: true

jobs:
  check:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-infra
      cancel-in-progress: true
    steps:
      - name: Show plan
        run: |
          echo "Host: ${{ secrets.DEPLOY_HOST }}"
          echo "RPC : ${{ github.event.inputs.rpc_port }}"
          echo "UI  : ${{ github.event.inputs.ui_port }}  domain=${{ github.event.inputs.ui_domain }}"
          echo "Paths: health=${{ github.event.inputs.endpoints_health }} peers=${{ github.event.inputs.endpoints_peers }} block=${{ github.event.inputs.endpoints_block }}"
          echo "Duration: ${{ github.event.inputs.duration_sec }}s"

      - name: Server-side checks (docker compose + local curls)
        id: remote
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          command_timeout: 30m
          script: |
            set -Eeuo pipefail

            RPC_PORT="${{ github.event.inputs.rpc_port }}"
            UI_PORT="${{ github.event.inputs.ui_port }}"
            EP_HEALTH="${{ github.event.inputs.endpoints_health }}"
            EP_PEERS="${{ github.event.inputs.endpoints_peers }}"
            EP_BLOCK="${{ github.event.inputs.endpoints_block }}"
            DURATION="${{ github.event.inputs.duration_sec }}"

            REPORT_DIR="$HOME/ippan-health"
            mkdir -p "$REPORT_DIR"
            cd "$REPORT_DIR"

            echo "=== SYSTEM ===" | tee system.txt
            uname -a | tee -a system.txt
            date -Iseconds | tee -a system.txt

            echo "=== DOCKER ===" | tee docker.txt
            docker --version | tee -a docker.txt
            (docker compose version || docker-compose --version || true) | tee -a docker.txt
            echo "-- ps (all) --" | tee -a docker.txt
            docker ps --format 'table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}' | tee -a docker.txt

            # Detect common compose dirs created by the installer
            for d in /opt/ippan/node /opt/ippan/edge /opt/ippan/ui; do
              if [ -f "$d/docker-compose.yml" ]; then
                echo -e "\n-- compose ps: $d --" | tee -a docker.txt
                (cd "$d" && (docker compose ps || docker-compose ps)) | tee -a docker.txt || true
                echo -e "\n-- last 60 log lines: $d --" | tee -a docker.txt
                (cd "$d" && (docker compose logs --tail 60 || docker-compose logs --tail 60)) | tee -a docker.txt || true
              fi
            done

            # Local (on server) loopback curls
            BASE_RPC="http://127.0.0.1:${RPC_PORT}"
            BASE_UI="http://127.0.0.1:${UI_PORT}"

            echo "=== LOCAL CURLS (loopback) ===" | tee curls_local.txt
            echo "-- RPC health --" | tee -a curls_local.txt
            (curl -fsS "${BASE_RPC}${EP_HEALTH}" || echo "ERR") | tee -a curls_local.txt
            echo "-- RPC peers --" | tee -a curls_local.txt
            (curl -fsS "${BASE_RPC}${EP_PEERS}" || echo "ERR") | tee -a curls_local.txt
            echo "-- RPC block --" | tee -a curls_local.txt
            (curl -fsS "${BASE_RPC}${EP_BLOCK}" || echo "ERR") | tee -a curls_local.txt
            echo "-- UI HEAD --" | tee -a curls_local.txt
            (curl -fsSI "${BASE_UI}" | head -n1 || echo "ERR") | tee -a curls_local.txt

            # Monitor block height advances
            echo "=== MONITOR height ===" | tee monitor.txt
            H1=$(curl -fsS "${BASE_RPC}${EP_BLOCK}" | jq -r '.height // .block.height // -1' || echo -1)
            echo "t0 height=${H1}" | tee -a monitor.txt
            start=$(date +%s)
            last="$H1"
            while [ $(( $(date +%s) - start )) -lt "${DURATION}" ]; do
              sleep 2
              H=$(curl -fsS "${BASE_RPC}${EP_BLOCK}" | jq -r '.height // .block.height // -1' || echo -1)
              ts=$(date -Iseconds)
              echo "${ts} height=${H}" | tee -a monitor.txt
              last="$H"
            done
            echo "tN height=${last}" | tee -a monitor.txt

            # Simple exit signal for height progress (non-fatal; we evaluate on runner)
            if [ "$last" -lt "$H1" ] || [ "$last" -eq -1 ]; then
              echo "HEIGHT_STATUS=bad" | tee result.env
            elif [ "$last" -gt "$H1" ]; then
              echo "HEIGHT_STATUS=ok" | tee result.env
            else
              echo "HEIGHT_STATUS=stalled" | tee result.env
            fi

            echo "RPC_PORT=${RPC_PORT}" >> result.env
            echo "UI_PORT=${UI_PORT}" >> result.env
            echo "EP_HEALTH=${EP_HEALTH}" >> result.env
            echo "EP_PEERS=${EP_PEERS}" >> result.env
            echo "EP_BLOCK=${EP_BLOCK}" >> result.env

            # Print a short summary to stdout (captured by action)
            echo "SUMMARY_BEGIN"
            echo "Height: start=${H1} end=${last} status=$(grep HEIGHT_STATUS result.env | cut -d= -f2)"
            echo "SUMMARY_END"

      - name: Parse remote summary
        id: parse
        run: |
          # Extract the “SUMMARY_*” lines from the previous step’s logs:
          set -e
          tail -n 2000 "$GITHUB_STEP_SUMMARY" >/dev/null 2>&1 || true
          # The ssh-action prints to its own logs; we can’t scrape remote files without scp.
          # Instead, we rely on the "SUMMARY_BEGIN..END" in the previous step's output captured by the runner logs.
          echo "Height summary is in the previous step logs."

      - name: Public HTTPS checks (from runner to domain)
        id: https
        continue-on-error: true
        run: |
          set -e
          DOMAIN="${{ github.event.inputs.ui_domain }}"
          echo "Probing https://${DOMAIN}"
          curl -fsSI "https://${DOMAIN}" | head -n 20

      - name: Final report
        run: |
          echo "## IPPAN Infra Health Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Host: \`${{ secrets.DEPLOY_HOST }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- RPC Port: \`${{ github.event.inputs.rpc_port }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- UI Port: \`${{ github.event.inputs.ui_port }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Endpoints: \`${{ github.event.inputs.endpoints_health }}, ${{ github.event.inputs.endpoints_peers }}, ${{ github.event.inputs.endpoints_block }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- UI (public): \`https://${{ github.event.inputs.ui_domain }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### What this did" >> $GITHUB_STEP_SUMMARY
          echo "1. Ran \`docker ps\`, per-stack \`docker compose ps\` and last 60 lines of logs on the server." >> $GITHUB_STEP_SUMMARY
          echo "2. Probed \`127.0.0.1:${{ github.event.inputs.rpc_port }}${{ github.event.inputs.endpoints_health }}\`, \`/peers\`, \`/block\`." >> $GITHUB_STEP_SUMMARY
          echo "3. Monitored block height for \`${{ github.event.inputs.duration_sec }}s\` to detect stalls." >> $GITHUB_STEP_SUMMARY
          echo "4. Checked public \`https://${{ github.event.inputs.ui_domain }}\` from the runner." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "> Tip: to fetch raw server-side reports (\`system.txt\`, \`docker.txt\`, \`curls_local.txt\`, \`monitor.txt\`)," >> $GITHUB_STEP_SUMMARY
          echo "add an scp step to upload them as artifacts." >> $GITHUB_STEP_SUMMARY
